一、 TCP/IP Socket
     TCP协议是面向连接的、保证高可靠性的传输协议，IP协议是无连接、不可靠的网络协议
     1.常规应用的四层网络分层：应用层、传输层、网络层、链路层
     2.Socket是在应用层和传输层之间的一个抽象层，封装了传输层的复杂操作提供简单易用的API给应用层使用
     3.TCP 连接的三次握手，客户端向服务端发送一个syn包（syn=j），服务端收到syn包并确认（ack=j+1），同时向客户端发送一个syn包（syn=k），
     客户端收到服务端的确认包和同步包，客户端再向服务端发一个确认包（ack=k+1），完成三次握手
     4.TCP 断开四次挥手，客户端会先发一个FIN包通知服务端请求关闭连接，服务端会发一个确认ack包给客户端，当服务端运行一段时间后会发一个FIN包给客户端请求断开连接，
     客户端收到服务端请求之后会发一个确认ack包给服务端，表示收到服务端请求
     5.TCP 可靠性的保证是采用“带重传的肯定确认的”技术，结合滑动窗口技术以提高网络吞吐量
     6.TCP 粘包、拆包原因
        - Socket 缓冲区和滑动窗口：每个socket在内核中都有一个发送缓冲区和接收缓冲区
        - MSS/MTU 限制：MSS（TCP报文中data部分的最大长度）、MTU（链路层一次发送 最大数据限制）
        - Nagle 算法
     7.TCP 粘包、拆包问题解决：可以通过定义应用的协议(protocol)来解决，协议的作用就定义传输数据的格式。

二、NIO
     NIO 非阻塞IO，一种基于通道和缓冲区的IO方式。NIO 有三大核心组件，Channel（通道）、Buffer（缓冲区）、Selector（选择器）。
     数据总是从通道读取到缓冲区或者是从缓冲区写入通道，Selector用来监听多个通道的事件，因此单个线程可以监听多个数据通道。
     一个通道创建之后在Selector上注册感兴趣的事件，通过调用Selector的select方法返回一个准备就绪的SelectionKey集合，SelectionKey中包含
     对这个事件感兴趣的Channel。

三、Netty
    Netty是一个高性能、异步事件驱动的NIO网络框架，具有高并发、传输快、封装好等特点。
    1. Netty的Reactor线程模型：mainReactor负责处理客户端的连接请求，并将accept的连接注册到subReactor中的一个线程中；subReactor负责处理
    客户端通道上的数据读写；ThreadPool 负责处理具体的业务逻辑。
    2.Netty服务启动之前调用group、channel，handler、option、attr、childHandler、childOption、childAttr设置启动参数
    3.Netty通过编写多个ChannelHandler 来处理不同的功能，通过ChannelPipeline来保证ChannelHandler的处理顺序。每个Channel创建的时候都会关联一个ChannelPipeline，
    ChannelHandler通过封装成ChannelHandlerContext链表结构添加到ChannelPipeline中以此来保证ChannelHandler的执行顺序。
    4.调用顺序：先是调用ChannelPipeline中的fireXXX方法，接着是ChannelHandlerContext中的fireXXX方法，最后是ChannelHandler中的XXX方法

四、Tomcat
    1.Tomcat的最顶层是一个Server，代表着整个服务，控制着整个tomcat的生命周期，一个Server包含至少一个Service，用于提供具体的服务。
    2.Service主要包含两个部分，Connector和Container，Connector负责处理网络连接相关的事情，并提供Socket和Request和Response的转换，
    Container负责封装和管理Servlet，以及处理Request请求，一个Service只有一个Container，但是可以有多个Connector，这是因为一个服务可以处理多个连接
    3.Connector使用ProtocolHandler来处理网络请求的，包含三个部件，EndPoint、Processor、Adapter，Endpoint用来处理底层的Socket网络连接，实现的是TCP/IP协议；
    Processor用于将连接接收到的socket封装成Request，实现的是Http协议；Adapter用于将Request交给Container具体处理。
    4.EndPoint中有两个内部类，Acceptor和Poller，Acceptor主要负责监听网络连接且进行任务分发的后台线程，Acceptor接收网络请求然后将socket交给Poller，Poller负责
    执行数据的读取和业务处理。

五、JVM与多线程
    1.Java内存区域：程序计数器、虚拟机栈、本地方法栈、Java堆、方法区
    2.Java内存模型：这是一个抽象的概念，规范定义程序中变量的访问方式。每个线程创建的时候都会为其创建一个工作内存，用于存储线程私有的数据，
    而Java内存模型规定所有的变量都必须存储在主内存中，主内存属于共享区域，所有线程都可以访问，但是线程对变量的操作必须在工作内存中进行。所以，
    当线程要对共享变量操作是先要将主内存中的变量拷贝到工作内存，操作完之后再拷贝到主内存。
    3.一般程序中由happen-before保证程序语义的有序性，volatile保证共享变量对所有线程可见，禁止指令重排优化
    4.创建对象：检查这个类是否被加载，加载类，为对象分配内存，初始化对象内存空间，设置对象头（类的元数据信息、对象哈希码、GC分代年龄等），调用init方法初始化对象
    5.对象内存布局：对象头、实例数据、对齐填充，对象头中存放类元数据信息、哈希码、GC分代年龄、所标志信息等
    6.可达性分析算法：从节点开始搜索，是否有GC Roots与之相连，可作为GC Root的对象
        - 虚拟机栈中引用的对象
        - 本地方法栈中引用的对象
        - 方法区中类静态属性引用的对象
        - 方法区中常量引用的对象
    7.垃圾收集算法：标记-整理算法、复制算法、分代收集算法
    8.堆内存分代：年轻代（Eden、Survivor）、老年代、永久代，Minor GC、Full GC，每块区域满了都会触发Minor GC，Old、Perm满了会触发Full GC
    9.创建线程的方式：继承Thread、实现Runnable、由线程池创建，线程包含几种状态：创建(new)、就绪(runnable)、运行(running)、阻塞(blocked)、等待（time waiting、waiting）、消亡（dead）
    10.同步互斥锁：synchronized三种使用方式，修饰实例方法，对当前实例加锁；修饰静态方法，对当前Class对象加锁；修饰代码块，对指定对象加锁。通过javap可查看字节码，修饰方法通过
    字节码中的flag（ACC_SYNCHRONIZED）设置加锁，修饰块通过在代码块前后加monitorenter 和monitorexit 指令。
    synchronized加锁，每个对象都有一个monitor对象与之关联，monitor中有两个队列，一个同步队列一个等待队列，当多个线程同时访问一段代码时，没有获取到锁的线程会进入到同步队列，
    当线程调用了wait方法时，会释放调锁，然后进入等待队列，
    JVM对synchronized的优化：偏向锁、轻量级锁、自旋锁、锁消除
    11.UnSafe（指针类）、CAS（比较交换）和AQS（队列同步器）：
        - UnSafe：allocateMemory、reallocateMemory、freeMemory用于分配内存、扩展内存、释放内存，UnSafe可以定位对象属性的内存位置
        - CAS：依托于UnSafe类，通过比较预期值域内存位置上的值，相等则设置为新值，否则不操作；Atomic系列就是基于CAS保证操作的原子性，
            循环读取值与内存位置上的值比较，直到相等然后设置新值
        - AQS：用于构建锁或其他同步组件的基础框架，通过一个volatile int state控制同步状态，当state=0时表示没有任何线程占用共享资源，
            当state>0表示当前有线程占用共享资源，其他线程需要进入同步队列进行等待。AQS中通过内部类Node构建一个双向队列实现FIFO的同步队列
            完成线程获取锁的排队工作，通过ConditionObject构建一个等待队列，当线程调用await之后线程会加入等待队列，当其他线程调用signal之后
            线程将从等待队列移到同步队列进行锁竞争。
            AQS作为基础组件，对于锁的实现有两种不同的模式，共享模式（Semaphore）和独占模式（ReentrantLock），不管是共享模式还是独占模式都是基于
            AQS实现的，内部都维持着一个同步队列和多个等待队列。
    12.JUC并发包：ReentrantLock、Condition、Semaphore、CountDownLatch 、CyclicBarrier
       - ReentrantLock：基于AQS实现的独占重入锁，同一个线程可以多次获取同一把锁，释放相同的次数，灵活，多种获取锁方式。
       - Condition：可以让线程在合适的时间地点进行等待，或者在特定的时刻通知线程继续执行
       - Semaphore：信号量用于控制访问公共资源的线程数量，用于流量控制；多个线程间还是存在并发问题
       - CountDownLatch：闭锁，一种同步的方法，延迟线程进度直到线程到达某个终点状态，只能使用一次，基于AQS实现
       - CyclicBarrier：循环栅栏，一个同步辅助类，允许一组线程相互等待，直到达到某个公共屏障点，内部通过一个ReentrantLock和Condition进行计算等待
    13.线程池
        - 线程过多对性能的影响：会耗尽CPU和内存资源，创建和关闭线程需要花费过多时间，大量线程回收给GC带来压力，延长GC停顿时间
        - 创建线程池：JDK实现的线程池ThreadPoolExecutor，corePoolSize指定线程池中的线程数量，maxPoolSize指定线程池中最大的线程数量，
            keepAliveTime指定多余线程存活时长，timeUnit制动keepAliveTime单位，workQueue任务队列，threadFactory线程工厂，handle拒绝策略
        - 任务队列的几种实现：SynchronousQueue（没有容量，总是将任务交给线程执行，没有线程则新建，大于最大线程数，则执行拒绝）、
            ArrayBlockingQueue（有界队列，任务大于corePoolSize则将任务加入任务队列，若队列已满，则创建线程，若线程数量大于maxPoolSize则执行拒绝）、
            LinkedBlockingQueue（无界队列，任务大于corePoolSize加入任务队列，直到资源耗尽）、PriorityBlockingQueue（优先队列）
        - 拒绝策略：AbortPolicy（直接抛异常）、CallerRunsPolicy（调用线程运行被丢弃任务）、DiscardOledestPolicy（丢弃最老任务）、DiscardPolicy（丢弃无法处理的任务）
    14.ThreadLocal：为每个线程创建一个单独的变量副本，提供了保持对象的方法和避免参数传递的复杂性；每个Thread中维护这一个ThreadLocalMap，
        key是一个ThreadLocal的弱引用，当key的弱引用被GC回收，value却不能回收，则会出现内存泄漏

六、Java 中常见容器
    1.有序集合List
        - ArrayList：新建是创建一个空的Object数组，第一次add时扩展容量为10，空间不足是扩展为原来的1.5倍，通过Arrays.copyOf进行拷贝
        - LinkedList：由内部类Node构建的一个FIFO双向链表
        - Vector：线程安全的list，通过方法加synchronized
        - CopyOnWriteArrayList：写入时先加锁读到数组，然后扩展加入新元素，最后赋值解锁；读支持并发读
    2.无序无重复集合Set
        - HashSet：由HashMap的key构成
        - LinkedHashSet：底层由LinkedHashMap实现，由hashCode决定元素的存储位置，同时使用链表维护元素的次序，插入性能低于HashSet，遍历时要快
        - TreeSet：TreeSet可以确保集合元素处于排序状态

    3.Map容器
        - HashMap：基于哈希表的数据结构，初始容量16，默认负载因子0.75
        - HashTable：线程安全的哈希表
        - LinkedHashMap：继承HashMap，底层使用哈希表和双向链表保存元素
        - ConcurrentHashMap：高并发容器，在JDK1.7版本中，ConcurrentHashMap的数据结构是由一个Segment数组和多个HashEntry组成，
        Segment数组的意义就是将一个大的table分割成多个小的table来进行加锁，也就是上面的提到的锁分离技术，而每一个Segment元素存储的是HashEntry数组+链表，
        这个和HashMap的数据存储结构一样。
        JDK1.8的实现已经摒弃了Segment的概念，而是直接用Node数组+链表+红黑树的数据结构来实现，并发控制使用Synchronized和CAS来操作，整个看起来就像是优化过且线程安全的HashMap


七、Dubbo
    1.dubbo中用到的设计模式：工厂模式、装饰器模式、责任链模式、观察者模式、动态代理模式
    2.dubbo中的注解：SPI（标识一个扩展点，接口上）、Adaptive（作用在方法上，根据方法参数来调用具体实现类的对应方法）、
        Activate（作用于类上，标识Filter是否加入执行器责任链中）
    3.dubbo中的插件机制：每个组件接口都有一个ExtensionLoader负责加载、存储该组件的扩展点，有三种加载方式：名称加载扩展点、加载激活扩展点（filter）、加载自适应扩展点
    4.服务提供者初始化，dubbo服务提供者在ServiceConfig的export方法中开始暴露服务，选用服务端口默认20880；
    - 生成URL对象，URL是dubbo中的核心模型，包含了调用链路中的注册中心、服务端配置、消费端配置，有两种URL（注册中心URL、服务URL）；
    - 生成本地服务代理，scope没有设置成remote，服务同时会在本地暴露，生成一个本地服务代理对象，本地调用dubbo接口时直接调用本地代理不走网络请求
    - 生成远程服务代理，它会生成一个Invoker，该Invoker是服务ref（实现类）的一个代理包含了携带服务信息的URL对象，Invoker的invoke方法被调用时最终调到ref指定的服务实现，Invoker创建之后
    接着由Protocol组件来创建Exporter，这里有RegistryProtocol创建会包装进Listener和Filter，在RegistryProtocol.doLocalExport执行暴露逻辑，真正执行服务暴露的是DubboProtocol，这里启动服务监听，
    再回到RegistryProtocol中完成把服务注册到注册中心，提供者会监听configurators节点，感知注册中心的配置变化
    5.服务消费者初始化，ReferenceBean是一个FactoryBean，在init方法中开始初始化消费者，RegistryProtocol.refer方法中先把消费者注册到注册中心，然后监听providers、configurators、routers节点，消费端
    会本地缓存远程服务提供者、注册中心配置、路由配置信息，消除消费端对注册中心的强依赖，DubboProtocol.refer中创建一个DubboInvoker对象，该Invoker对象持有服务Class、providerUrl、
    负责和提供端通信的ExchangeClient，Invoker对象保存在DubboProtocol的invokers集合中，构建DubboInvoker时会创建一个或多个ExchangeClient用来处理和提供端的连接，默认一个URL只会创建一个ExchangeClient，由
    connections参数控制，RegistryProtocol.doRefer方法的最后，由Cluster组件来创建一个Invoker并返回一个扩展链，默认failover，最后生成消费端服务代理
    6.远程服务调用过程，消费者调用接口方法最终进入InvokerInvocationHandler的invoke方法，是否执行mock，加入负载均衡和路由、容错策略，然后由DubboInvoker执行，判断执行方法单向、异步、同步（通过锁进行等待，
    当超时或有结果返回时通知，通过唯一ID实现请求与返回对应），消费者请求编码->提供者请求解码->提供者处理请求->提供者响应结果编码->消费者响应结果解码
    7.请求编码：16个字节的固定消息头，其中包括2字节魔数，第三字节指定请求还是响应和序列化方式，八个字节的请求ID，4字节请求数据长度；
    响应编码：16字节数据头，2字节魔数，1字节序列化方式，1字节响应状态，8字节响应ID和请求ID一致，4字节消息长度

八、Spring
    1.Spring IOC和AOP概念
    2.注入方式：接口注入、set注入、构造方法注入
    3.Spring bean作用域：singleton、prototype、request、session、global session
    4.Spring框架中常见的设计模式：工厂方法、单例模式、适配器模式、装饰器模式、代理模式、观察者模式、策略模式、模板方法
    5.Spring bean的生命周期：
        - Spring 对bean 进行实例化，默认单例
        - Spring 对bean 进行依赖注入
        - 如果Bean实现了BeanNameAware接口，Spring将Bean的ID传给setBeanName（）方法
        - 如果Bean实现了BeanFactoryAware接口，Spring将BeanFactory传给setBeanFactory方法
        - 如果Bean实现了ApplicationContextAware接口，Spring将applicationContext传给setApplicationContext方法
        - 如果Bean实现了BeanPostProcessor接口，它的postProcessBeforeInitialization方法将被调用
        - 如果Bean实现了InitializingBean接口，它的afterPropertiesSet方法将被调用，如果有init-method，该方法也会被调用
        - 如果Bean实现了BeanPostProcessor接口，它的postProcessAfterInitialization方法将被调用
        - 此时Bean已经准备就绪，可以被使用，一直存在应用上下文中，直到应用上下文被销毁
        - 若Bean实现DisposableBean接口，Spring将调用它的distroy方法，和distroy-method方法
    6.Spring容器可分为两条主要设计路线，BeanFactory是IOC容器的基础，提供了IOC容器最基本的功能，ApplicationContext继承了BeanFactory，
    另一方面实现了一些高级接口，赋予了更高级的IOC容器特性。
    Spring IOC容器的主要功能是创建和管理Spring Bean对象以及Bean属性注入，Spring容器通过ResourceLoader/Resolver读取Bean的配置文件并
    转换成统一资源对象Resource，然后通过BeanDefinitionReader转化成Spring内部对Bean的描述对象BeanDefinition，然后通过BeanRegistry注册
    到BeanFactory中，供后续转换成Bean对象使用
    7.常见的ApplicationContext实现
        - FileSystemXMLApplicationContext：从文件绝对路径加载配置文件
        - ClassPathXMLApplicationContext：从classpath加载配置文件
        - XMLWebApplicationContext：web中使用
        - AnnotationConfigApplicationContext：Spring Boot非Web项目使用
        - AnnotationConfigEmbeddedWebApplicationContext：Spring Boot Web项目中使用
    8.Spring IOC容器启动过程（Spring Boot为例）
        - Spring Boot默认一些类在META-INF/spring.factories中，通过SpringFactoriesLoader加载，在initialize方法中会加载ApplicationContextInitializer、
        ApplicationListener供后续启动过程中使用
        - SpringApplication的run方法中会触发一些容器启动事件，先是ApplicationStartedEvent，然后ApplicationEnvironmentPreparedEvent，比如ConfigFileApplicationListener
        就是这时候触发的，加载application.properties配置，然后创建ApplicationContext（AnnotationConfigEmbeddedWebApplicationContext）上下文，
        这里实例化AnnotatedBeanDefinitionReader、ClassPathBeanDefinitionScanner扫描注解定义的Bean的工具，接着触发ApplicationPreparedEvent，
        这阶段导入EnableAutoConfiguration自动配置类，接着调用Spring IOC启动核心AbstractApplicationContext中refresh方法
        refresh方法中：
        1）传统的Spring在这里创建BeanFactory并读取bean的定义文件，加载、解析、注册BeanDefinition，Spring Boot不在这里创建
        2）为BeanFactory配置容器特性，例如类加载器、事件处理器等
        3）容器的某些子类指定特殊的BeanPost事件处理器，Spring Boot中这里实现注解定义的Bean的扫描工作
        4）调用所有注册的BeanFactoryPostProcessor的Bean
        5）注册所有实现了BeanPostProcessor接口的Bean
        6）onRefresh调用容器子类某些特殊Bean的初始化，模板方法，Spring Boot中这里创建内嵌Tomcat
        7）实例化单例Bean
    9.Spring MVC 初始化
        - DispatcherServletAutoConfiguration中实例化DispatcherServlet，从父类HttpServletBean的init方法开始
        - spring是一个大的父容器，springmvc是其中的一个子容器。父容器不能访问子容器对象，但是子容器可以访问父容器对象。一般做一个ssm框架项目的时候，
        扫描@controller注解类的对象是在springmvc容器中。而扫描@service、@component、@Repository等注解类的对象都是在spring容器中。
        在FrameworkServlet的initWebApplicationContext方法中初始化子容器，在DispatchServlet的onRefresh中初始化MVC九大组件
        initMultipartResolver(context);//初始化文件上传解析器
        initLocaleResolver(context);//初始化本地解析器
        initThemeResolver(context);//初始化主题解析器
        initHandlerMappings(context);//初始化处理器映射器
        initHandlerAdapters(context);//初始化处理器适配器
        initHandlerExceptionResolvers(context);//初始化异常解析器
        initRequestToViewNameTranslator(context);//初始化请求到视图名称解析器
        initViewResolvers(context);//初始化视图解析器
        initFlashMapManager(context);
        - 处理请求过程doDispatch
        1）处理文件上传请求
        2）解析请求，获取HandlerExecutionChain对象
        3）从HandlerExecutionChain对象获取HandlerAdapter对象，实际上是从HandlerMapping对象中获取
        4）在controller方法执行前，执行拦截器的相关方法（pre）
        5）执行HandlerAdapter对象的handler方法，返回ModelAndView
        6）在controller方法执行后，执行拦截器的相关方法（post）
        7）进行视图解析

八、MySql
    1.事务ACID特性：原子性、一致性、隔离性、持久性
    2.CAP理论：CAP指的是Consistency(强一致性)、Availability(可用性)、Partition tolerance(分区容错性)。
    3.BASE就是为了解决关系型数据库强一致性引起的可用性降低而提出的解决方案，基本可用、软状态、最终一致
    4.事务隔离级别：读未提交、读已提交（解决脏读）、可重复读（解决不可重复读，MySQL InnoDB通过MVCC解决幻读）、可串行化
    5.Spring事务
        - 传播行为：PROPAGATION_REQUIRED、PROPAGATION_SUPPORTS、PROPAGATION_MANDATORY、PROPAGATION_REQUIRED_NEW、PROPAGATION_NOT_SUPPORTED
        、PROPAGATION_NEVER、PROPAGATION_NESTED
        - 隔离规则：
        - 回滚规则：
    5.MySQL锁
    6.MySQL索引